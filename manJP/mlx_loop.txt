MiniLibX 3 "September 19, 2002"
NAME
MiniLibX - Handle events
SYNOPSYS

int mlx_loop(void *mlx_ptr);
int mlx_key_hook(void *win_ptr, int (*funct_ptr)(), void *param);
int mlx_mouse_hook(void *win_ptr, int (*funct_ptr)(), void *param);
int mlx_expose_hook(void *win_ptr, int (*funct_ptr)(), void *param);
int mlx_loop_hook(void *mlx_ptr, int (*funct_ptr)(), void *param);

X-WINDOW EVENTS
X-Window systemは双方向性を持ちます。
一方ではプログラムがピクセルや画像などをスクリーンに表示する指令を送り、
もう一方ではスクリーン側のキーボードやマウスから情報を得ることができます。
そのために、プログラムは”イベント”をキーボードやマウスから受け取ります。

DESCRIPTION
イベントを受け取るためには、mlx_loop関数を使用します。この関数はreturnしません。
この無限ループは、イベントを待ち続け、イベントに対応したユーザー定義の関数をコールします。
接続識別子mlx_ptrを引数として必要とします。(mlxマニュアル参照)
以下の三つのイベントに任意の関数を割り当てることができます。
・キー押下
・マウスボタン押下
・ウィンドウ再描画（これは"Expose"イベントと呼ばれ、管理するのはあなたのプログラムの仕事です。）
同じイベントに対して、ウィンドウごとに異なる関数を定義できます。

mlx_key_hook関数、mlx_mouse_hook関数、 mlx_expose_hook関数は同じ様に動作します。
関数ポインタfunct_ptrに、イベントが発生したときコールしたい関数を指定します。
ウィンドウ識別子win_ptrで、イベントを待つウィンドウを指定します。
paramはコールする関数に渡す引数を格納します。

mlx_loop_hook関数の構文は、mlx_loop関数と同じですが、与えられたはイベントが発生しなかったときにコールされます。
イベントをキャッチしたとき、MiniLibXは、対応した関数を以下のような引数でコールします。

  expose_hook(void *param);
  key_hook(int keycode,void *param);
  mouse_hook(int button,int x,int y,void *param);
  loop_hook(void *param);

これらの関数の名前は任意です。イベントに応じて引数が違うことを確認してください。
コールされる関数は、MiniLibXには含まれません。

paramはmlx_*_hook関数で指定されたアドレスです。このアドレスは、MiniLibXが使用したり、変更したりすることはありません。
キーボード、マウスイベントでは、追加の情報として、
押下されたキーのkeycode(X11 include file "keysymdef.h"を参照)、
マウスボタンが押下されたウィンドウ座標(x,y)と、どのbuttonを押したかが渡されます。


GOING FURTHER WITH EVENTS
The MiniLibXは、すべてのX-Windowイベントへの十分なアクセスを提供します。
mlx.hはmlx_*_hook関数群と同様にmlx_hook関数の定義を含みます。
イベントとマスク値はX11のインクルードファイルx.hから取得できます。
mlx_int_param_event.cのソースコードをみて、MiniLibXがイベントに対して、どのようにあなたの関数をコールするか確認してください。

SEE ALSO
mlx(3), mlx_new_window(3), mlx_pixel_put(3), mlx_new_image(3)

AUTHOR
Copyright ol@ - 2002-2014 - Olivier Crouzet
